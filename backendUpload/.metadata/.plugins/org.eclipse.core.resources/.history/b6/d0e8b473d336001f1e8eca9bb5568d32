package com.backendUpload.Service;
import java.awt.image.BufferedImage;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.backendUpload.Entity.UploadImageFile;
import com.backendUpload.Repository.UploadImageRepository;

import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;

@Service
public class UploadImageService {
	@Autowired 
    private UploadImageRepository uploadImageRepository;
    @Autowired 
    private BoldWordExtractor boldWordExtractor;
    @Autowired
    private Tesseract tesseract;
    
    private String BASE_DIR="src/main/resources/imageData";
    
    
    
    public String handleFileUpload(MultipartFile file) {
        if (file.isEmpty()) {
            return "Please select a file to upload.";
        }

        try {
            // Get the bytes from the uploaded file
            byte[] bytes = file.getBytes();
            // Create directory if not exists
            Path path = Paths.get(BASE_DIR);
            Files.createDirectories(path);
            // Create the file path where the uploaded file will be stored
            Path uploadedFilePath = path.resolve(file.getOriginalFilename());
            // Save the file
            Files.write(uploadedFilePath, bytes);
            // Return the uploaded file path
            return "File uploaded successfully: " + uploadedFilePath.toString();
        } catch (Exception e) {
            return "Failed to upload file: " + e.getMessage();
        }
    }
    
    public UploadImageFile recognizeText(InputStream inputStream, MultipartFile file) throws IOException {
    	  BufferedImage image = ImageIO.read(inputStream);
    	  FileReader fr = new FileReader(file);
    	  tesseract.setTessVariable("user_defined_dpi", "300"); 
    	  FileWriter fw = new FileWriter(BASE_DIR+file.getOriginalFilename());
    	  
    	  try {
    		  String text = tesseract.doOCR(image);
    	    	System.out.println(text);
    	    	String boldWords = boldWordExtractor.extractBoldWords(text);
    	    	
    	    	String imageBase64 = Base64.getEncoder().encodeToString(file.getBytes());
    	    	System.out.println(imageBase64.length());
    	    	UploadImageFile uploadedImage = new UploadImageFile();
    	    	
    	    	uploadedImage.setImage(imageBase64);
    	    	uploadedImage.setText(text);
    	    	uploadedImage.setBoldTextWords(boldWords);
    	    	
    	   return uploadImageRepository.save(uploadedImage);
    	  } catch (TesseractException e) {
    	   e.printStackTrace();
    	  }
    	  return null;
    	 }
    
//    public UploadImageFile uploadImage(MultipartFile file) throws Exception{
//
//    	Tesseract tessract = new Tesseract();
//    	tesseract.setDatapath("tessdata");
//    	tesseract.setLanguage("eng");
//    	tesseract.setPageSegMode(1);
//    	tesseract.setOcrEngineMode(1);
//    	
//    	
//    	BufferedImage imgData = ImageIO.read(file.getInputStream());
//    	
//    	String text = tessract.doOCR(imgData);
//    	System.out.println(text);
//    	String boldWords = boldWordExtractor.extractBoldWords(text);
//    	
//    	String imageBase64 = Base64.getEncoder().encodeToString(file.getBytes());
//    	
//    	UploadImageFile uploadedImage = new UploadImageFile();
//    	uploadedImage.setImage(imageBase64);
//    	uploadedImage.setText(text);
//    	uploadedImage.setBoldTextWords(boldWords);
//    	
//    	return uploadImageRepository.save(uploadedImage);
//    }
    
}

//Save the uploaded file to a temporary location
//File tempFile = File.createTempFile("temp", null);
//file.transferTo(tempFile);
//
//// Read the saved file into a BufferedImage
//BufferedImage bufferedImage = ImageIO.read(tempFile);
//
//// Perform OCR using Tesseract
//String result = null;
//if (bufferedImage != null) {
//  result = tesseract.doOCR(bufferedImage);
//}
//
//// Delete the temporary file
//tempFile.delete();
//
//return result;
//}
//}

